/* The box-sizing property is used to set this behavior. By default, the content-box model is used. With this model, when an element has a specific width, that width is calculated based only on the element's content. Padding and border values get added to the total width, so the element grows to accommodate these values. */
/* The border-box sizing model does the opposite of content-box */
* {
  /* box-sizing: content-box; */
  box-sizing: border-box;
}

body {
  margin: 0;
  font-family: sans-serif;
  background-color: #f5f6f7;
}

.header {
  text-transform: uppercase;
  padding: 32px;
  background-color: #0a0a23;
  color: #fff;
  text-align: center;
  border-bottom: 4px solid #fdb347;
}

.gallery {
  /* using gap property to add gap between the photos */
  gap: 16px;
  /* Flexbox is a one-dimensional CSS layout that can control the way items are spaced out and aligned within a container.

 To use it, give an element a display property of flex. This will make the element a flex container. Any direct children of a flex container are called flex items. */
  display: flex;

  /* Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values:

 row (default): horizontal axis with flex items from left to right
 row-reverse: horizontal axis with flex items from right to left
 column: vertical axis with flex items from top to bottom
 column-reverse: vertical axis with flex items from bottom to top */

  flex-direction: row;

  /* Setting it to wrap will allow the items to wrap to the next row or column. */
  /* nowrap (default) will prevent your items from wrapping and shrink them if needed. */
  flex-wrap: wrap;
  /* The justify-content property determines how the items inside a flex container are positioned along the main axis, */
  justify-content: center;
  align-items: center;
  /* creating space around container */
  padding: 20px 10px;
  max-width: 1400px;
  margin: 0 auto;
}

.gallery img {
  width: 100%;
  max-width: 350px;
  height: 300px;
  /* object-fit property to determine how images should behave. */
  object-fit: cover;
  /* smoothing the corners of photos */
  border-radius: 10px;
}

/* The ::after pseudo-element creates an element that is the last child of the selected element. You can use it to add an empty element after the last image. If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout. */

.gallery::after {
  content: "";
  width: 350px;
}
